相关链接:  
30分钟新手git教程  https://www.cnblogs.com/mjbin/p/5820942.html
Git使用方法   https://blog.csdn.net/xukai0110/article/details/80637902
Git详细教程   https://www.imooc.com/article/20411
--------------------------------------------------------------------------------------------------
为什么要用git?
1.现实编码中涉及好多修改,你记不住。-git可以跟踪历史版本
2.可以更好进行团队协作开发-提交历史,版本修改,代码冲突问题.

--------------------------------------------------------------------------------------------------

版本控制工具:
git
工具，版本控制
github-代码仓库
网站，社交平台，开源项目，远程仓库

-------------------------------------------
svn与git区别
svn集成式:SVN在没有联网的时候是拒绝干活的
git分布式:在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作.当有网络的时候，再把本地提交推送一下就完成了同步

github作用:国外远程仓库  github官网  https://github.com
码云:国内远程仓库        码云官网   http://git.oschina.net/


-------------------------------------------------

操作git有可视化工具:
可视化-SourceTree,vs code集成好了。
命令行(推荐)-
工具-除了git bash
windows系统内置了几个命令行工具-
cmd:按下键盘上windows窗户,输入cmd
powershell:shift+鼠标右键，找powershell 

基本dos命令操作:
cd -进入某个目录  cd ../ 上一个目录 cd ./当前目录
cls-清屏   
ctrl+c强制退出   wq退出
键盘方向键可以找之前的命令


------------------------------------------------
一。建立一个库:码云(国内),github(国外)

设置贡献者:因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。

安装完成后，还需要最后一步设置，在命令行输入：
git config --global user.name "Your Name"
git config --global user.email "email@example.com"

git config --global credential.helper store  可保存用户名,密码每次push不用在输入

git config --list
查看所有配置项，看看有没有user.name,user.email这两个配置

----------------------------------------------
二。git基本操作-本地仓库推到远程仓库:
1.注意推之前先拉取
  git init 初始化下本地仓库
  git pull 拉取仓库地址
  git add 文件名   提交到暂存区  【git add -A 或git add . 提交本地全部文件】
  git status      查看提交状态
  git commit -m '提交说明'       提交说明
  git push --set-upstream  master 仓库地址 或者先关联远程库  git remote add origin 仓库地址  然后每次提交用  git push origin master       提交到版本库

------------------------------------------

三。团队合作开发:
分支:每个人不同的模块
1.先拉取远程仓库分支：查看本地分支与远程分支是否一致
2.然后把自己分支推送到远程仓库
3.合并分支:每个人加入到对方的分支中
------------------------------------------

2.1创建分支合并步骤:
 1.git branch dev   创建分支
 git status  查看当前分支在哪个上面
 git checkout  dev   切换到创建的分支上
 git merge kuige  合并kuige到dev上
 git pull origin dev 先拉取分支
 git push origin dev 推到远程dev分支里
----------------------------------------------------
2.2 分支其它命令
 1.查看远程分支
git branch -a

 2.查看本地分支
git branch

 3.创建并切换分支 （加-b表示创建并切换）
git checkout -b 分支名

 4.切换回分支
git checkout 分支名

 5.从主分支里创建新分支
git checkout master -b 新分支名

 6.合并某分支到当前分支
git merge 分支名

 7.删除分支-不要在当前分支下 ,否则删除不了
git branch -d 分支名
git branch -D 分支名 (强行删除分支)

8.删除远程分支
git push origin --delete kuige

----------------------------------------------
2.3 回滚问题,冲突问题:
git log  查看版本号
git reset --hard  版本号(不用复制全,可以是前7位字母)    回滚到某个版本号
或者下面
git reset --hard HEAD 回滚到最新版本
git reset --hard HEAD~1   回滚到相比于最新的其次1个版本
git push -f origin kuige1 强制删除远程分支(删除24小时内的)


git diff 提交历史号   可以查看冲突地方
自己手动解决冲突问题,一般以线上的版本为主
git add 这些在提交一遍
----------------------------------------------------
git的三个区:
工作区:你自己电脑里能看到的目录,工作的文件
暂存区:工作区需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改到远程稳定版本区
优点:
作为过渡层
避免误操作
保护工作区和版本区
分支处理

版本区（库）:稳定版本区，远程仓库





